# DataSource settings: set here your own configurations for the database
spring:
  jpa:
    hibernate:
      ddl-auto: none
    database: POSTGRESQL
    datasource:
      platform: postgres
    show-sql: true
    properties:
      hibernate:
        naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        dialect: org.hibernate.dialect.PostgreSQLDialect
      database:
        driverClassName: org.postgresql.Driver
      datasource:
        testWhileIdle: true
        validationQuery: SELECT 1
      jpa:
        hibernate:
          ddl-auto: create
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/Spmia-realm

server:
  port: 8081

#Регистрация службы в Spring Eureka
eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

#Настройка шаблона размыкатель цепи
resilience4j:
  circuitbreaker:
    instances:
      organizationService:
        registerHealthIndicator: true
        ringBufferSizeInClosedState: 6
        ringBufferSizeInHalfOpenState: 4
        waitDurationInOpenState: 20s
        failureRateThreshold: 60

management:
  endpoints:
    web:
      exposure:
        include: "*"

keycloak:
  realm: spmia-realm
  auth-server-url: http://keycloak:8080/auth
  ssl-required: external
  resource: ostock
  credentials:
    secret: ecSnFJiIQ2HImBQpYLmIXazuPNOT5kxs
  use-resource-role-mappings: true
  bearer-only: true
